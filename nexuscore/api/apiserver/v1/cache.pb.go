// Copyright (c) 2025 马晓璐
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of
// this software and associated documentation files (the "Software"), to deal in
// the Software without restriction, including without limitation the rights to
// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
// the Software, and to permit persons to whom the Software is furnished to do so,
// subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.1
// source: proto/apiserver/v1/cache.proto
/*
该包（v1）定义了缓存服务（Cache）的 gRPC 协议消息结构与服务接口，主要用于处理 Secrets（密钥）和 Policies（策略）的列表查询功能。包含请求 / 响应消息类型、客户端调用接口、服务端实现接口及 gRPC 通信相关的底层处理逻辑，支持通过分页参数（offset/limit）查询资源列表，为密钥和策略的缓存查询提供标准化的 gRPC 通信协议。
*/
package v1

import (
	"context"
	"reflect"
	"sync"

	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// 验证当前生成的代码是否足够新（与protobuf版本兼容）
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// 验证runtime/protoimpl是否足够新（与protobuf版本兼容）
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ListSecretsRequest 定义了 ListSecrets 方法的请求结构
type ListSecretsRequest struct {
	state         protoimpl.MessageState  // 消息状态（protobuf内部使用）
	sizeCache     protoimpl.SizeCache     // 消息大小缓存（优化序列化性能）
	unknownFields protoimpl.UnknownFields // 未知字段（用于兼容未定义的protobuf字段）

	Offset *int64 `protobuf:"varint,1,opt,name=offset,proto3,oneof" json:"offset,omitempty"` // 分页偏移量（从第N条记录开始查询）
	Limit  *int64 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`   // 分页大小（最多返回N条记录）
}

// Reset 重置消息为初始状态
func (x *ListSecretsRequest) Reset() {
	*x = ListSecretsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_apiserver_v1_cache_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

// String 返回消息的字符串表示
func (x *ListSecretsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

// ProtoMessage 实现 proto.Message 接口（标记为协议消息）
func (*ListSecretsRequest) ProtoMessage() {}

// ProtoReflect 返回消息的反射对象（用于protobuf动态反射）
func (x *ListSecretsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_apiserver_v1_cache_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: 请使用 ListSecretsRequest.ProtoReflect.Descriptor 替代
func (*ListSecretsRequest) Descriptor() ([]byte, []int) {
	return file_proto_apiserver_v1_cache_proto_rawDescGZIP(), []int{0}
}

// GetOffset 获取 Offset 字段的值（若为nil则返回0）
func (x *ListSecretsRequest) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

// GetLimit 获取 Limit 字段的值（若为nil则返回0）
func (x *ListSecretsRequest) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

// SecretInfo 包含密钥的详细信息
type SecretInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                            // 密钥名称
	SecretId    string `protobuf:"bytes,2,opt,name=secret_id,json=secretId,proto3" json:"secret_id,omitempty"`    // 密钥ID
	Username    string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`                    // 关联的用户名
	SecretKey   string `protobuf:"bytes,4,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"` // 密钥内容
	Expires     int64  `protobuf:"varint,5,opt,name=expires,proto3" json:"expires,omitempty"`                     // 过期时间（时间戳）
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`              // 描述信息
	CreatedAt   string `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // 创建时间
	UpdatedAt   string `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // 更新时间
}

// Reset 重置消息为初始状态
func (x *SecretInfo) Reset() {
	*x = SecretInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_apiserver_v1_cache_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

// String 返回消息的字符串表示
func (x *SecretInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

// ProtoMessage 实现 proto.Message 接口
func (*SecretInfo) ProtoMessage() {}

// ProtoReflect 返回消息的反射对象
func (x *SecretInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_apiserver_v1_cache_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: 请使用 SecretInfo.ProtoReflect.Descriptor 替代
func (*SecretInfo) Descriptor() ([]byte, []int) {
	return file_proto_apiserver_v1_cache_proto_rawDescGZIP(), []int{1}
}

// GetName 获取 Name 字段的值（若为nil则返回空字符串）
func (x *SecretInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// GetSecretId 获取 SecretId 字段的值
func (x *SecretInfo) GetSecretId() string {
	if x != nil {
		return x.SecretId
	}
	return ""
}

// GetUsername 获取 Username 字段的值
func (x *SecretInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// GetSecretKey 获取 SecretKey 字段的值
func (x *SecretInfo) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

// GetExpires 获取 Expires 字段的值
func (x *SecretInfo) GetExpires() int64 {
	if x != nil {
		return x.Expires
	}
	return 0
}

// GetDescription 获取 Description 字段的值
func (x *SecretInfo) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// GetCreatedAt 获取 CreatedAt 字段的值
func (x *SecretInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

// GetUpdatedAt 获取 UpdatedAt 字段的值
func (x *SecretInfo) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

// ListSecretsResponse 定义了 ListSecrets 方法的响应结构
type ListSecretsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount int64         `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"` // 总记录数
	Items      []*SecretInfo `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`                              // 密钥列表
}

// Reset 重置消息为初始状态
func (x *ListSecretsResponse) Reset() {
	*x = ListSecretsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_apiserver_v1_cache_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

// String 返回消息的字符串表示
func (x *ListSecretsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

// ProtoMessage 实现 proto.Message 接口
func (*ListSecretsResponse) ProtoMessage() {}

// ProtoReflect 返回消息的反射对象
func (x *ListSecretsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_apiserver_v1_cache_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: 请使用 ListSecretsResponse.ProtoReflect.Descriptor 替代
func (*ListSecretsResponse) Descriptor() ([]byte, []int) {
	return file_proto_apiserver_v1_cache_proto_rawDescGZIP(), []int{2}
}

// GetTotalCount 获取 TotalCount 字段的值
func (x *ListSecretsResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

// GetItems 获取 Items 字段的值
func (x *ListSecretsResponse) GetItems() []*SecretInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

// ListPoliciesRequest 定义了 ListPolicies 方法的请求结构
type ListPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset *int64 `protobuf:"varint,1,opt,name=offset,proto3,oneof" json:"offset,omitempty"` // 分页偏移量
	Limit  *int64 `protobuf:"varint,2,opt,name=limit,proto3,oneof" json:"limit,omitempty"`   // 分页大小
}

// Reset 重置消息为初始状态
func (x *ListPoliciesRequest) Reset() {
	*x = ListPoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_apiserver_v1_cache_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

// String 返回消息的字符串表示
func (x *ListPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

// ProtoMessage 实现 proto.Message 接口
func (*ListPoliciesRequest) ProtoMessage() {}

// ProtoReflect 返回消息的反射对象
func (x *ListPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_apiserver_v1_cache_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: 请使用 ListPoliciesRequest.ProtoReflect.Descriptor 替代
func (*ListPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_proto_apiserver_v1_cache_proto_rawDescGZIP(), []int{3}
}

// GetOffset 获取 Offset 字段的值
func (x *ListPoliciesRequest) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

// GetLimit 获取 Limit 字段的值
func (x *ListPoliciesRequest) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

// PolicyInfo 包含策略的详细信息
type PolicyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                     // 策略名称
	Username     string `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`                             // 关联的用户名
	PolicyStr    string `protobuf:"bytes,3,opt,name=policy_str,json=policyStr,proto3" json:"policy_str,omitempty"`          // 策略内容（字符串形式）
	PolicyShadow string `protobuf:"bytes,4,opt,name=policy_shadow,json=policyShadow,proto3" json:"policy_shadow,omitempty"` // 策略影子（可能为加密或备份内容）
	CreatedAt    string `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`          // 创建时间
}

// Reset 重置消息为初始状态
func (x *PolicyInfo) Reset() {
	*x = PolicyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_apiserver_v1_cache_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

// String 返回消息的字符串表示
func (x *PolicyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

// ProtoMessage 实现 proto.Message 接口
func (*PolicyInfo) ProtoMessage() {}

// ProtoReflect 返回消息的反射对象
func (x *PolicyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_apiserver_v1_cache_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: 请使用 PolicyInfo.ProtoReflect.Descriptor 替代
func (*PolicyInfo) Descriptor() ([]byte, []int) {
	return file_proto_apiserver_v1_cache_proto_rawDescGZIP(), []int{4}
}

// GetName 获取 Name 字段的值
func (x *PolicyInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// GetUsername 获取 Username 字段的值
func (x *PolicyInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// GetPolicyStr 获取 PolicyStr 字段的值
func (x *PolicyInfo) GetPolicyStr() string {
	if x != nil {
		return x.PolicyStr
	}
	return ""
}

// GetPolicyShadow 获取 PolicyShadow 字段的值
func (x *PolicyInfo) GetPolicyShadow() string {
	if x != nil {
		return x.PolicyShadow
	}
	return ""
}

// GetCreatedAt 获取 CreatedAt 字段的值
func (x *PolicyInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

// ListPoliciesResponse 定义了 ListPolicies 方法的响应结构
type ListPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalCount int64         `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"` // 总记录数
	Items      []*PolicyInfo `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`                              // 策略列表
}

// Reset 重置消息为初始状态
func (x *ListPoliciesResponse) Reset() {
	*x = ListPoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_apiserver_v1_cache_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

// String 返回消息的字符串表示
func (x *ListPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

// ProtoMessage 实现 proto.Message 接口
func (*ListPoliciesResponse) ProtoMessage() {}

// ProtoReflect 返回消息的反射对象
func (x *ListPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_apiserver_v1_cache_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: 请使用 ListPoliciesResponse.ProtoReflect.Descriptor 替代
func (*ListPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_proto_apiserver_v1_cache_proto_rawDescGZIP(), []int{5}
}

// GetTotalCount 获取 TotalCount 字段的值
func (x *ListPoliciesResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

// GetItems 获取 Items 字段的值
func (x *ListPoliciesResponse) GetItems() []*PolicyInfo {
	if x != nil {
		return x.Items
	}
	return nil
}

var File_proto_apiserver_v1_cache_proto protoreflect.FileDescriptor // proto文件描述符（用于反射）

var file_proto_apiserver_v1_cache_proto_rawDesc = []byte{ /* 二进制描述符数据（protobuf内部使用） */ }

var (
	file_proto_apiserver_v1_cache_proto_rawDescOnce sync.Once                                     // 确保描述符数据只初始化一次
	file_proto_apiserver_v1_cache_proto_rawDescData = file_proto_apiserver_v1_cache_proto_rawDesc // 原始描述符数据
)

// file_proto_apiserver_v1_cache_proto_rawDescGZIP 返回压缩后的描述符数据（优化传输）
func file_proto_apiserver_v1_cache_proto_rawDescGZIP() []byte {
	file_proto_apiserver_v1_cache_proto_rawDescOnce.Do(func() {
		file_proto_apiserver_v1_cache_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_apiserver_v1_cache_proto_rawDescData)
	})
	return file_proto_apiserver_v1_cache_proto_rawDescData
}

var file_proto_apiserver_v1_cache_proto_msgTypes = make([]protoimpl.MessageInfo, 6) // 消息类型信息（protobuf内部使用）
var file_proto_apiserver_v1_cache_proto_goTypes = []interface{}{ /* 消息类型的Go反射类型（用于protobuf动态处理） */ }
var file_proto_apiserver_v1_cache_proto_depIdxs = []int32{ /* 依赖索引（protobuf内部用于类型关联） */ }

// 初始化函数：注册protobuf描述符和消息类型
func init() { file_proto_apiserver_v1_cache_proto_init() }
func file_proto_apiserver_v1_cache_proto_init() {
	if File_proto_apiserver_v1_cache_proto != nil {
		return
	}
	// 初始化消息类型信息（用于安全模式下的字段访问）
	if !protoimpl.UnsafeEnabled {
		// 为每个消息类型注册字段访问器（略）
	}
	// 构建protobuf文件描述符
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(struct{}{}).PkgPath(),
			RawDescriptor: file_proto_apiserver_v1_cache_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_apiserver_v1_cache_proto_goTypes,
		DependencyIndexes: file_proto_apiserver_v1_cache_proto_depIdxs,
		MessageInfos:      file_proto_apiserver_v1_cache_proto_msgTypes,
	}.Build()
	File_proto_apiserver_v1_cache_proto = out.File
	// 清理临时变量（释放内存）
	file_proto_apiserver_v1_cache_proto_rawDesc = nil
	file_proto_apiserver_v1_cache_proto_goTypes = nil
	file_proto_apiserver_v1_cache_proto_depIdxs = nil
}

// 引用导入（用于抑制未使用的包错误）
var _ context.Context
var _ grpc.ClientConnInterface

// 编译时断言：确保当前代码与grpc包版本兼容
const _ = grpc.SupportPackageIsVersion6

// CacheClient 是 Cache 服务的客户端接口
// 关于ctx使用和流RPC关闭的语义，请参考 https://godoc.org/google.golang.org/grpc#ClientConn.NewStream
type CacheClient interface {
	// ListSecrets 用于查询密钥列表
	ListSecrets(ctx context.Context, in *ListSecretsRequest, opts ...grpc.CallOption) (*ListSecretsResponse, error)
	// ListPolicies 用于查询策略列表
	ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*ListPoliciesResponse, error)
}

// cacheClient 是 CacheClient 接口的实现
type cacheClient struct {
	cc grpc.ClientConnInterface // gRPC客户端连接
}

// NewCacheClient 创建一个新的 Cache 服务客户端
func NewCacheClient(cc grpc.ClientConnInterface) CacheClient {
	return &cacheClient{cc}
}

// ListSecrets 实现 CacheClient 接口的 ListSecrets 方法
func (c *cacheClient) ListSecrets(ctx context.Context, in *ListSecretsRequest, opts ...grpc.CallOption) (*ListSecretsResponse, error) {
	out := new(ListSecretsResponse)
	// 调用gRPC底层方法发送请求
	err := c.cc.Invoke(ctx, "/proto.Cache/ListSecrets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListPolicies 实现 CacheClient 接口的 ListPolicies 方法
func (c *cacheClient) ListPolicies(ctx context.Context, in *ListPoliciesRequest, opts ...grpc.CallOption) (*ListPoliciesResponse, error) {
	out := new(ListPoliciesResponse)
	// 调用gRPC底层方法发送请求
	err := c.cc.Invoke(ctx, "/proto.Cache/ListPolicies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CacheServer 是 Cache 服务的服务器接口（需由服务端实现）
type CacheServer interface {
	ListSecrets(context.Context, *ListSecretsRequest) (*ListSecretsResponse, error)
	ListPolicies(context.Context, *ListPoliciesRequest) (*ListPoliciesResponse, error)
}

// UnimplementedCacheServer 可嵌入到服务实现中，提供向前兼容的默认方法
type UnimplementedCacheServer struct{}

// ListSecrets 默认实现：返回未实现错误
func (*UnimplementedCacheServer) ListSecrets(context.Context, *ListSecretsRequest) (*ListSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "方法 ListSecrets 未实现")
}

// ListPolicies 默认实现：返回未实现错误
func (*UnimplementedCacheServer) ListPolicies(context.Context, *ListPoliciesRequest) (*ListPoliciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "方法 ListPolicies 未实现")
}

// RegisterCacheServer 将 Cache 服务实现注册到gRPC服务器
func RegisterCacheServer(s *grpc.Server, srv CacheServer) {
	s.RegisterService(&_Cache_serviceDesc, srv)
}

// _Cache_ListSecrets_Handler 是 ListSecrets 方法的gRPC服务器处理函数
func _Cache_ListSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecretsRequest)
	// 解析请求参数
	if err := dec(in); err != nil {
		return nil, err
	}
	// 若有拦截器则通过拦截器调用，否则直接调用服务实现
	if interceptor == nil {
		return srv.(CacheServer).ListSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Cache/ListSecrets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).ListSecrets(ctx, req.(*ListSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// _Cache_ListPolicies_Handler 是 ListPolicies 方法的gRPC服务器处理函数
func _Cache_ListPolicies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPoliciesRequest)
	// 解析请求参数
	if err := dec(in); err != nil {
		return nil, err
	}
	// 若有拦截器则通过拦截器调用，否则直接调用服务实现
	if interceptor == nil {
		return srv.(CacheServer).ListPolicies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Cache/ListPolicies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheServer).ListPolicies(ctx, req.(*ListPoliciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// _Cache_serviceDesc 是 Cache 服务的gRPC描述符（包含服务元信息和方法映射）
var _Cache_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Cache",
	HandlerType: (*CacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSecrets",
			Handler:    _Cache_ListSecrets_Handler,
		},
		{
			MethodName: "ListPolicies",
			Handler:    _Cache_ListPolicies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},              // 无流式方法
	Metadata: "proto/apiserver/v1/cache.proto", // 关联的proto文件路径
}
