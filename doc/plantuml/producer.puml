@startuml
title Producer sendWithRetry sequence (cdmp-mini)
actor Client
participant "Gin Handler" as Handler
participant "UserProducer.sendUserMessage" as SendUserMessage
participant "UserProducer.sendWithRetry" as SendWithRetry
participant "inFlightSem (channel)" as InFlight
participant "kafka.Writer.WriteMessages" as KafkaWrite
participant "UserProducer.sendToRetryTopic" as SendRetry
participant "UserProducer.SendToDeadLetterTopic" as DeadLetter

Client -> Handler: HTTP POST /v1/users
Handler -> SendUserMessage: serialize user -> call sendUserMessage
SendUserMessage -> SendWithRetry: prepare kafka.Message
SendWithRetry -> SendWithRetry: validateMessage()
SendWithRetry -> InFlight: try acquire (non-blocking)
alt acquired
    InFlight -> SendWithRetry: token
    SendWithRetry -> KafkaWrite: WriteMessages(sendMsg)
    alt success
        KafkaWrite --> SendWithRetry: nil (success)
        SendWithRetry --> Handler: return success
        SendWithRetry -> InFlight: release
    else failure
        KafkaWrite --> SendWithRetry: error
        SendWithRetry -> SendRetry: sendToRetryTopic(msg, err)
        alt sendToRetry success
            SendRetry --> SendWithRetry: nil
            SendWithRetry --> Handler: success (via retry)
        else sendToRetry fail
            SendRetry -> DeadLetter: SendToDeadLetterTopic
            DeadLetter --> SendWithRetry: nil
            SendWithRetry --> Handler: error
        end
        SendWithRetry -> InFlight: release
    end
else saturated
    SendWithRetry --> Handler: return 503 / internal server (in-flight limit reached)
end

note right
Key points:
- inFlightSem provides synchronous backpressure: non-blocking acquire.
- On writer failure, message goes to retry topic or dead-letter.
- Metrics (ProducerInFlightCurrent, ProducerFailures) updated along the way.
end note

note left of SendWithRetry
Kafka Message fields / headers used in code:
- Key: user ID (binary) or username for deletes
- Headers:
    * HeaderOperation: operation name (e.g. "CREATE", "UPDATE", "DELETE")
    * HeaderOriginalTimestamp: RFC3339 timestamp when created
    * HeaderRetryCount: retry count as string ("0", "1", ...)
    * HeaderRetryError / HeaderNextRetryTS: added when sending to retry
These header names appear as constants in the producer/consumer code.
end note
@enduml
