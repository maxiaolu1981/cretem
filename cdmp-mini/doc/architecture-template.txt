┌─────────────────────────────────────────────────────────────────────────────────────────────┐
│  项目根目录 (project-name)          │
├─────────────────────────────────────────────────────────────────────┤
│  ┌───────────────┐  应用入口层 (初始化与启动)                     │
│  │   cmd/         │  - 程序启动入口、命令行参数解析                │
│  │   ├─ api/      │  - 初始化各层依赖、启动HTTP服务                │
│  │   │  └─ main.go│  - 示例：初始化Store→Service→Controller→路由   │
│  │   └─ cli/      │  - 命令行工具入口（如数据库迁移）              │
│  └───────────────┘                                                 │
│                                                                     │
│  ┌───────────────┐  接口层 (API)                                   │
│  │   api/         │  - 定义API接口规范（请求/响应模型）             │
│  │   └─ v1/       │  - 版本化API定义                               │
│  │      ├─ user.go│  - 示例：UserRequest/UserListResponse模型       │
│  │      └─ error.go│ - 错误码定义（如code.ErrNotFound）            │
│  └───────────────┘                                                 │
│                                                                     │
│  ┌───────────────┐  控制器层 (Controller) 【表现层】                │
│  │ internal/     │  - 接收HTTP请求，返回响应                        │
│  │   apiserver/  │  - 参数校验、调用Service层，不处理业务逻辑       │
│  │   └─ controller/                                                │
│  │      └─ v1/                                                      │
│  │         └─ user/                                                 │
│  │            ├─ user_controller.go                                 │
│  │            │  - 结构体：UserController{srv Service}              │
│  │            │  - 方法：List(c *gin.Context)、Get(c *gin.Context)  │
│  │            └─ user_controller_test.go                            │
│  └───────────────┘                                                 │
│                                                                     │
│  ┌───────────────┐  服务层 (Service) 【业务逻辑层】                 │
│  │ internal/     │  - 实现核心业务逻辑                              │
│  │   apiserver/  │  - 调用Store层获取数据，处理业务规则            │
│  │   └─ service/                                                   │
│  │      └─ v1/                                                      │
│  │         ├─ service.go                                           │
│  │         │  - 接口：Service{ Users() UserSrv }                   │
│  │         │  - 实现：service{ store Store }                        │
│  │         └─ user/                                                 │
│  │            ├─ user_service.go                                   │
│  │            │  - 接口：UserSrv{ List(ctx, opts) (*UserList, error) } │
│  │            │  - 实现：userService{ store Store }                 │
│  │            └─ user_service_test.go                              │
│  └───────────────┘                                                 │
│                                                                     │
│  ┌───────────────┐  数据存储层 (Store) 【数据访问层】               │
│  │ internal/     │  - 封装数据库操作，提供数据访问接口              │
│  │   apiserver/  │  - 屏蔽底层存储细节（MySQL/Redis等）            │
│  │   └─ store/                                                      │
│  │      ├─ store.go                                                 │
│  │      │  - 接口：Factory{ Users() UserStore }                    │
│  │      └─ mysql/                                                   │
│  │         ├─ datastore.go                                         │
│  │         │  - 实现：datastore{ db *gorm.DB }                     │
│  │         │  - 方法：Users() UserStore                             │
│  │         └─ user.go                                              │
│  │            - 接口：UserStore{ List(ctx, opts) (*UserList, error) } │
│  │            - 实现：users{ db *gorm.DB }                          │
│  └───────────────┘                                                 │
│                                                                     │
│  ┌───────────────┐  模型层 (Model)                                  │
│  │ internal/     │  - 定义数据模型（数据库表映射、业务实体）        │
│  │   model/      │  - 示例：User{ID int, Name string}              │
│  │   └─ user.go  │                                                 │
│  └───────────────┘                                                 │
│                                                                     │
│  ┌───────────────┐  中间件 (Middleware)                             │
│  │ internal/     │  - 处理HTTP请求通用逻辑                          │
│  │   middleware/ │  - 示例：日志、认证、限流、请求ID                │
│  │   ├─ logger.go│                                                 │
│  │   └─ auth.go  │                                                 │
│  └───────────────┘                                                 │
│                                                                     │
│  ┌───────────────┐  公共工具 (Common)                               │
│  │   pkg/        │  - 跨模块复用工具函数、常量、类型                │
│  │   ├─ util/    │  - 示例：时间处理、加密、校验工具                │
│  │   ├─ config/  │  - 配置解析（viper封装）                        │
│  │   └─ log/     │  - 日志工具（zap封装）                          │
│  └───────────────┘                                                 │
│                                                                     │
│  ┌───────────────┐  配置与脚本                                      │
│  │   configs/    │  - 配置文件（app.yaml、database.yaml）           │
│  │   scripts/    │  - 部署脚本、数据库迁移脚本                      │
│  │   go.mod      │  - 依赖管理                                      │
│  │   Makefile    │  - 构建脚本（build、test、run）                  │
│  └───────────────┘                                                 │
└─────────────────────────────────────────────────────────────────────┘


# 各层核心职责与边界说明

## 1. 应用入口层 (cmd/)
- **职责**：程序启动入口，负责初始化所有依赖并启动服务
- **边界**：仅依赖下层（Controller/Service/Store），不包含业务逻辑
- **关键逻辑**：
  ```go
  // cmd/api/main.go 示例
  func main() {
    // 1. 初始化配置
    cfg := config.Load()
    
    // 2. 初始化数据存储层
    storeIns := store.NewStore(cfg.Database)
    
    // 3. 初始化服务层
    serviceIns := service.NewService(storeIns)
    
    // 4. 初始化控制器层
    userController := controller.NewUserController(serviceIns)
    
    // 5. 初始化路由
    r := router.InitRouter(userController)
    
    // 6. 启动HTTP服务
    r.Run(cfg.Server.Addr)
  }
  ```


## 2. 接口层 (api/)
- **职责**：定义API接口的请求/响应格式、错误码规范
- **边界**：被Controller层依赖，不依赖任何上层
- **示例**：
  ```go
  // api/v1/user.go
  type UserListRequest struct {
    Page  int `form:"page" binding:"required,min=1"`
    Size  int `form:"size" binding:"required,min=1,max=100"`
  }
  
  type UserListResponse struct {
    Total int       `json:"total"`
    Items []*User   `json:"items"`
  }
  ```


## 3. 控制器层 (controller/)
- **职责**：
  - 接收HTTP请求，解析并校验参数（使用binding标签）
  - 调用Service层接口处理业务
  - 封装响应结果（成功/失败）并返回
- **边界**：仅依赖Service层接口，不直接操作Store层或数据库
- **示例**：
  ```go
  // controller/v1/user/user_controller.go
  type UserController struct {
    srv service.UserSrv // 依赖Service接口
  }
  
  func NewUserController(srv service.UserSrv) *UserController {
    return &UserController{srv: srv}
  }
  
  // List 处理用户列表查询请求
  func (c *UserController) List(ctx *gin.Context) {
    var req api.UserListRequest
    if err := ctx.ShouldBindQuery(&req); err != nil {
      ctx.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
      return
    }
    
    // 调用Service层
    resp, err := c.srv.List(ctx, service.ListOptions{
      Page: req.Page,
      Size: req.Size,
    })
    if err != nil {
      ctx.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
      return
    }
    
    ctx.JSON(http.StatusOK, resp)
  }
  ```


## 4. 服务层 (service/)
- **职责**：
  - 实现核心业务逻辑（如权限校验、数据转换、事务控制）
  - 调用Store层接口获取/修改数据
  - 对Controller层提供统一的业务接口
- **边界**：依赖Store层接口，不依赖Controller层
- **示例**：
  ```go
  // service/v1/user/user_service.go
  type UserSrv interface {
    List(ctx context.Context, opts ListOptions) (*api.UserListResponse, error)
  }
  
  type userService struct {
    store store.UserStore // 依赖Store接口
  }
  
  func NewUserService(store store.UserStore) UserSrv {
    return &userService{store: store}
  }
  
  // List 实现用户列表查询业务逻辑
  func (s *userService) List(ctx context.Context, opts ListOptions) (*api.UserListResponse, error) {
    // 业务逻辑：检查权限（示例）
    if err := checkPermission(ctx); err != nil {
      return nil, err
    }
    
    // 调用Store层获取数据
    users, total, err := s.store.List(ctx, opts.Page, opts.Size)
    if err != nil {
      return nil, err
    }
    
    // 数据转换（Model→API响应）
    return &api.UserListResponse{
      Total: total,
      Items: convertUsers(users),
    }, nil
  }
  ```


## 5. 数据存储层 (store/)
- **职责**：
  - 封装数据库CRUD操作（屏蔽MySQL/PostgreSQL等差异）
  - 提供数据访问接口，隐藏SQL实现细节
- **边界**：仅依赖数据库驱动（如gorm），不依赖上层
- **示例**：
  ```go
  // store/mysql/user.go
  type UserStore interface {
    List(ctx context.Context, page, size int) ([]*model.User, int, error)
  }
  
  type users struct {
    db *gorm.DB // 数据库连接
  }
  
  func NewUserStore(db *gorm.DB) UserStore {
    return &users{db: db}
  }
  
  // List 从数据库查询用户列表
  func (u *users) List(ctx context.Context, page, size int) ([]*model.User, int, error) {
    var total int64
    var userList []*model.User
    
    // 执行SQL查询（分页）
    if err := u.db.WithContext(ctx).Model(&model.User{}).Count(&total).Error; err != nil {
      return nil, 0, err
    }
    
    offset := (page - 1) * size
    if err := u.db.WithContext(ctx).Offset(offset).Limit(size).Find(&userList).Error; err != nil {
      return nil, 0, err
    }
    
    return userList, int(total), nil
  }
  ```


## 6. 模型层 (model/)
- **职责**：定义数据实体（与数据库表映射）
- **边界**：被Store层和Service层依赖，不依赖其他层
- **示例**：
  ```go
  // model/user.go
  type User struct {
    ID        int       `gorm:"primaryKey" json:"id"`
    Name      string    `gorm:"size:50" json:"name"`
    Age       int       `json:"age"`
    CreatedAt time.Time `json:"created_at"`
  }
  
  // 表名映射
  func (User) TableName() string {
    return "users"
  }
  ```


## 7. 中间件 (middleware/)
- **职责**：处理HTTP请求的通用逻辑（如日志记录、认证授权）
- **边界**：仅依赖gin.Context，不侵入业务逻辑
- **示例**：
  ```go
  // middleware/logger.go
  func Logger() gin.HandlerFunc {
    return func(c *gin.Context) {
      start := time.Now()
      c.Next() // 执行后续处理
      cost := time.Since(start)
      log.Printf("method=%s path=%s cost=%v", c.Request.Method, c.Request.URL, cost)
    }
  }
  ```


## 核心设计原则
1. **依赖倒置**：上层依赖下层接口，而非具体实现（如Controller依赖Service接口）
2. **单一职责**：每层只做自己的事（Controller管HTTP、Service管业务、Store管数据）
3. **接口隔离**：通过接口定义层间交互规范，降低耦合
4. **依赖注入**：通过构造函数传递依赖（如NewUserController接收Service参数）
